require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DataElementValuesController, type: :controller do
  before(:all) do
    @user = create(:user)
    @data_element = create(:data_element)
  end

  let(:nested_resources){
    {
      :data_element => @data_element
    }
  }

  # This should return the minimal set of attributes required to create a valid
  # DataElementValue. As you add validations to DataElementValue, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      value: 'abczyx',
      environment_id: create(:environment).id,
      data_element_id: create(:data_element).id,
      user: @user,
      random_value: nil,
      random_value_length: nil,
    }
  }

  let(:invalid_attributes) {
    {
      value: nil,
      environment: nil,
      data_element: nil,
      user: nil,
      random_value: nil,
      random_value_length: nil
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DataElementsController. Be sure to keep this updated too.
  let(:valid_session) { { 'user[email]' => @user.email, 'user[password]' => @user.password } }

  before(:each) do
    sign_in @user
  end

  describe "GET #new" do
    it "assigns a new data_element_value as @data_element_value"  do
      get :new, {}.merge(nested_resources), valid_session
      expect(assigns(:data_element_value)).to be_a_new(DataElementValue)
    end
  end

  describe "GET #edit" do
    it "assigns the requested data_element_value as @data_element_value"  do
      data_element_value = DataElementValue.create! valid_attributes
      get :edit, {:id => data_element_value.to_param}, valid_session
      expect(assigns(:data_element_value)).to eq(data_element_value)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new DataElementValue" do
        expect {
          post :create, {:data_element_value => valid_attributes}.merge(nested_resources), valid_session
        }.to change(DataElementValue, :count).by(1)
      end

      it "redirects to the created data_element_value" do
        post :create, {:data_element_value => valid_attributes}.merge(nested_resources), valid_session
        expect(response).to redirect_to(data_elements_path)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved data_element_value as @data_element_value"  do
        post :create, {:data_element_value => invalid_attributes}.merge(nested_resources), valid_session
        expect(assigns(:data_element_value)).to be_a_new(DataElementValue)
      end

      it "re-renders the 'new' template" do
        post :create, {:data_element_value => invalid_attributes}.merge(nested_resources), valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          value: 'abczyx',
          environment: create(:environment),
          data_element: create(:data_element),
          user: @user,
          random_value: true,
          random_value_length: 9,
        }
      }

      it "updates the requested data_element_value" do
        data_element_value = DataElementValue.create! valid_attributes
        put :update, {:id => data_element_value.to_param, :data_element_value => new_attributes}, valid_session
        data_element_value.reload
        expect(data_element_value.value).to eq(nil)
        expect(data_element_value.random_value).to eq(true)
      end

      it "assigns the requested data_element_value as @data_element_value"  do
        data_element_value = DataElementValue.create! valid_attributes
        put :update, {:id => data_element_value.to_param, :data_element_value => valid_attributes}, valid_session
        expect(assigns(:data_element_value)).to eq(data_element_value)
      end

      it "redirects to the data_element_value" do
        data_element_value = DataElementValue.create! valid_attributes
        put :update, {:id => data_element_value.to_param, :data_element_value => valid_attributes}, valid_session
        expect(response).to redirect_to(data_elements_url)
      end
    end

    context "with invalid params" do
      it "assigns the data_element_value as @data_element_value"  do
        data_element_value = DataElementValue.create! valid_attributes
        put :update, {:id => data_element_value.to_param, :data_element_value => invalid_attributes}, valid_session
        expect(assigns(:data_element_value)).to eq(data_element_value)
      end

      it "re-renders the 'edit' template" do
        data_element_value = DataElementValue.create! valid_attributes
        put :update, {:id => data_element_value.to_param, :data_element_value => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested data_element_value" do
      data_element_value = DataElementValue.create! valid_attributes
      expect {
        delete :destroy, {:id => data_element_value.to_param}, valid_session
      }.to change(DataElementValue, :count).by(-1)
    end

    it "redirects to the data_elements list" do
      data_element_value = DataElementValue.create! valid_attributes
      delete :destroy, {:id => data_element_value.to_param}, valid_session
      expect(response).to redirect_to(data_elements_url)
    end
  end

end
